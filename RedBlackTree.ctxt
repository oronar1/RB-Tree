#BlueJ class context
comment0.params=
comment0.target=RedBlackTree()
comment0.text=\r\n\ Initializes\ an\ empty\ RB-Tree.\r\n
comment1.params=n
comment1.target=boolean\ isRed(RedBlackTree.Node)
comment1.text=\r\n\ Checks\ if\ the\ node\ is\ red\r\n\ @param\ n\ Node\ of\ the\ RB-Tree\r\n\ @return\ false\ if\ node\ is\ null\r\n
comment10.params=n
comment10.target=RedBlackTree.Node\ RB_DeleteMax(RedBlackTree.Node)
comment10.text=\r\n\ Delete\ the\ key\ with\ the\ biggest\ key\ value\ rooted\ at\ n\r\n\ @param\ n\ RB-Tree\ node\r\n\ @return\ restored\ RB-Tree\ property\ or\ null\ in\ case\ no\ left\ nodes\r\n
comment11.params=key
comment11.target=void\ RB_Delete(int)
comment11.text=\r\n\ Removes\ the\ specified\ key\ from\ RB-Tree\ \ \ \ \r\n\r\n\ @param\ \ key\ the\ key\ value\ to\ be\ deleted\r\n
comment12.params=n\ key
comment12.target=RedBlackTree.Node\ RB_Delete(RedBlackTree.Node,\ int)
comment12.text=\r\n\ Delete\ the\ node\ with\ the\ given\ key\ rooted\ at\ n\r\n\ @param\ n\ -\ RB-Tree\r\n\ @param\ key\ -\ Key\ value\ to\ be\ deleted\r\n\ @return\ restored\ RB-Tree\ or\ null\r\n
comment13.params=n
comment13.target=RedBlackTree.Node\ rotateRight(RedBlackTree.Node)
comment13.text=\r\n\ Rotate\ to\ the\ right\ function\r\n\ @param\ n\ node\ of\ RB-Tree\r\n\ @return\ node\ of\ RB-Tree\r\n
comment14.params=n
comment14.target=RedBlackTree.Node\ rotateLeft(RedBlackTree.Node)
comment14.text=\r\n\ Rotate\ to\ the\ left\ function\r\n\ @param\ n\ node\ of\ RB-Tree\r\n\ @return\ node\ of\ RB-Tree\r\n
comment15.params=n
comment15.target=void\ changeColors(RedBlackTree.Node)
comment15.text=\r\n\ Change\ colors\ of\ a\ node,\ and\ its\ left\ and\ right\ child\r\n\ @param\ n\ parent\ node\ those\ colors\ have\ to\ be\ changed\r\n
comment16.params=n
comment16.target=RedBlackTree.Node\ moveRedLeft(RedBlackTree.Node)
comment16.text=\r\n\ When\ n\ is\ red\ and\ both\ left\ nodes,\ (n.left\ and\ n.left.left),\r\n\ are\ black,\ make\ n.left\ or\ one\ of\ its\ children\ red.\r\n\ @param\ n\ -\ node\ of\ RB-Tree\r\n\ @return\ n\ node\ of\ RB-Tree\r\n
comment17.params=n
comment17.target=RedBlackTree.Node\ moveRedRight(RedBlackTree.Node)
comment17.text=\r\n\ In\ case\ n\ is\ red\ and\ both\ h.right\ and\ h.right.left\r\n\ are\ black,\ make\ n.right\ or\ one\ of\ its\ children\ red.\r\n\ @param\ n\ Node\ of\ RB-Tree\r\n\ @return\ Node\ of\ RB\ tree\r\n
comment18.params=n
comment18.target=RedBlackTree.Node\ rbInvariantRestore(RedBlackTree.Node)
comment18.text=\r\n\ Restore\ red-black\ tree\ property\r\n\ @param\ n\ RB-Tree\ node\r\n\ @return\ n\ RB-Tree\ node\r\n
comment19.params=
comment19.target=int\ min()
comment19.text=\r\n\ Returns\ the\ smallest\ key\ in\ RB-Tree\r\n\ @return\ the\ smallest\ key\ in\ RB-Tree\r\n
comment2.params=n
comment2.target=int\ size(RedBlackTree.Node)
comment2.text=\r\n\ Checks\ the\ size\ value\ of\ node\ in\ subtree\ rooted\ at\ n\r\n\ @param\ n\ Node\ of\ the\ R-Tree\r\n\ @return\ 0\ if\ node\ is\ null\r\n
comment20.params=n
comment20.target=RedBlackTree.Node\ min(RedBlackTree.Node)
comment20.text=\r\n\ Returns\ smallest\ key\ in\ subtree\ rooted\ at\ n,\ otherwise\ null\ if\ no\ such\ key\r\n\ Complexity\ Theta(lg\ n)\r\n\ @param\ n\r\n\ @return\ node\ with\ minimum\ key\ value\r\n
comment21.params=
comment21.target=int\ max()
comment21.text=\r\n\ Returns\ the\ largest\ key\ in\ the\ RB-Tree\r\n\ @return\ the\ largest\ key\ in\ the\ RB-Tree\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment22.params=n
comment22.target=RedBlackTree.Node\ max(RedBlackTree.Node)
comment22.text=\r\n\ Returns\ largest\ key\ in\ subtree\ rooted\ at\ x;\ null\ if\ no\ such\ key\r\n\ Complexity\ Theta(lg\ n)\r\n\ @param\ n\r\n\ @return\ node\ with\ maximum\ key\ value\r\n
comment23.params=
comment23.target=void\ printKMin()
comment23.text=\r\n\ Function\ to\ print\ k\ smallest\ elements\ in\ growing\ up\ sequence\ \r\n\ Complexity\ is\ Theta(lg\ K)\r\n
comment24.params=x
comment24.target=void\ InOrderPrint(RedBlackTree.Node)
comment24.text=\r\n\ Printing\ In-Order\ traversal\ of\ the\ RB-tree\r\n\ in\ order\ to\ return\ elements\ in\ growing\ up\ sequence.\r\n\ Function\ implemented\ recursively\ with\ time\ complexity\ of\ O(n)\ \ \ \ \r\n\ @param\ x\ Root\ of\ the\ RB-Tree\ \r\n
comment25.params=a\ b\ Array\ x\ kVal
comment25.target=void\ toString(int,\ int,\ int[],\ RedBlackTree,\ int)
comment25.text=\r\n\ Function\ to\ print\ RBtree\ of\ size\ K\ and\ appropriate\ parts\ of\ a\ test\ array.\r\n\ Part\ of\ array\ chosen\ accordingly\ to\ values\ of\ 'a'\ and\ 'b'\ parameters.\r\n\ For\ example,\ in\ order\ to\ print\ 3/4\ of\ array,\ values\ are\ a\=3,\ b\=4.\r\n\ @param\ a\ value\ of\ the\ 'a'\ parameter\r\n\ @param\ b\ value\ of\ the\ 'b'\ parameter\r\n\ @param\ Array\ array\ to\ be\ printed\r\n\ @param\ x\ RB-Tree\r\n
comment26.params=x\ sizeVal\ Array
comment26.target=void\ kSmallest(RedBlackTree,\ int,\ int[])
comment26.text=\r\n\ Function\ that\ find\ and\ prints\ K\ smallest\ elements\ of\ the\ array\ in\ growing\ up\ sequence\r\n\ Also,\ prints\ appropriate\ part\ of\ test\ array\ accordingly\ to\ values\ of\ a\ and\ b\r\n\ (1/4*n,1/2*n,3/4*n,n)\r\n\ @param\ x\ -\ pointer\ to\ root\ of\ the\ RB-tree\r\n\ @param\ sizeVal\ -\ amount\ of\ K\ elements\ to\ find\r\n\ @param\ Array\ -\ Input\ array\ that\ simulate\ streaming\ data\r\n
comment27.params=x\ sizeVal\ Array
comment27.target=void\ kSmallestElements(RedBlackTree,\ int,\ int[])
comment27.text=\r\n\ kSmallestElements\ function\ simulates\ online\ streaming\ algorithm\ to\ find\ K\r\n\ smallest\ elements\ in\ streaming\ data.Data\ is\ simulated\ with\ arrays.\r\n\ for\ test\ of\ Pseudo-online\ algorithm\ to\ find\ K\ minimum\ elements.\r\n\ Function\ shows\ result\ at\ three\ test\ points\ depending\ on\ size\ of\ testing\ array.\r\n\ Test\ points\ are\ \:\ n/4,\ n/2,\ 3n/4\r\n\ The\ number\ of\ K\ elements\ received\ from\ main\ function.\r\n\ K\ value\ is\:\ 10,\ 50\ ,\ 100.\r\n\ @param\ x\ -\ pointer\ to\ root\ of\ the\ RB-tree\r\n\ @param\ sizeVal\ -\ amount\ of\ K\ elements\ to\ find\r\n\ @param\ Array\ -\ Input\ array\ that\ simulate\ streaming\ data\r\n
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ Returns\ the\ size\ of\ the\ RB-Tree\r\n\ @return\ the\ size\ of\ the\ RB-Tree\r\n
comment4.params=
comment4.target=boolean\ isEmpty()
comment4.text=\r\n\ Checks\ if\ RB-Tree\ is\ empty\r\n\ @return\ True\ if\ RB-Tree\ is\ empty,\ otherwise\ returns\ False\r\n
comment5.params=key
comment5.target=void\ RB_Insert(int)
comment5.text=\r\n\ Inserts\ the\ key\ into\ RB-Tree.If\ there\ is\ same\ key\ already\ exists,\ \r\n\ add\ it\ to\ the\ tree.\r\n\ Insert\ performed\ a\ call\ to\ a\ private\ function\ RB_Insert\r\n\ @param\ key\ the\ key\ value\ to\ be\ inserted\r\n
comment6.params=n\ key
comment6.target=RedBlackTree.Node\ RB_Insert(RedBlackTree.Node,\ int)
comment6.text=\r\n\ Insert\ the\ key\ into\ the\ subtree\ rooted\ at\ n.\r\n\ If\ there\ is\ same\ key\ already\ exists,\ add\ it\ to\ the\ tree.\r\n\ @param\ n\ Node\ of\ the\ RB-Tree\r\n\ @param\ key\ Key\ of\ the\ node\ to\ be\ inserted\r\n\ @return\ n\ Node\ of\ the\ RB-Tree\r\n
comment7.params=
comment7.target=void\ RB_DeleteMin()
comment7.text=\r\n\ Delete\ the\ smallest\ key\ node\ from\ RB-Tree.\r\n
comment8.params=n
comment8.target=RedBlackTree.Node\ RB_DeleteMin(RedBlackTree.Node)
comment8.text=\r\n\ Delete\ the\ key\ with\ the\ smallest\ key\ value\ rooted\ at\ n\r\n\ @param\ n\ node\ of\ the\ RB-Tree\r\n\ @return\ restored\ RB-Tree\ property\ or\ null\ in\ case\ no\ left\ nodes\r\n
comment9.params=
comment9.target=void\ RB_DeleteMax()
comment9.text=\r\n\ Delete\ the\ biggest\ key\ node\ from\ RB-Tree.\r\n\ \r\n
numComments=28
